
(in-package #:adpgh)


@header[:tag user-guide]{User Guide}

Welcome to the ADP User Guide! Here you will learn how to add documentation to your projects using ADP. ADP can be divided in two groups of functions. The API functions and Guide function. However, despite that distinction all the functions can be mixed to generate your documentation.

I will try to do my best explaining how to use ADP. If this is not sufficient, note that every piece of documentation of ADP has been generated by itself. So you can see the source code and see how ADP has been used. For example, this file was generated using the source located at @inline{guides/user-guide.lisp} .

@mini-table-of-contents[]

@subheader{Headers}

You can add headers in your documentation. In other words, they work as titles or subtitles. You can this way organize your guide with different sections (like I do in this guide). The macros that add headers are @fref[header], @fref[subheader] and @fref[subsubheader]. They need a string as the first argument. For example, if I write this:

@verbatim-code-block[:lang "common-lisp"]|{
@header{This is a header}
@subheader{This is a subheader}
@subsubheader{This is a subsubheader}
}|

You will see this:

@header{This is a header}
@subheader{This is a subheader}
@subsubheader{This is a subsubheader}

@subheader{Tables}

You can add tables using the macros @fref[table], @fref[row] and @fref[cell]. The best way to see how to use it is an example. Imagine we have some info in our lisp files:

@code-block[
  (cl:defparameter peter-info '(34 "Peter Garcia" 1435))
  (cl:defparameter maria-info '(27 "Maria Martinez" 1765))
  (cl:defparameter laura-info '(53 "Laura Beneyto" 1543))

  (cl:defun get-age (info)
    (first info))

  (cl:defun get-name (info)
    (second info))

  (cl:defun get-salary (info)
    (third info))
]

Now we can create a table like this:

@verbatim-code-block[:lang "common-lisp"]|{
@table[
  @row[
    @cell{Age} @cell{Name} @cell{Salary}
  ]
  @row[
    @cell[(get-age peter-info)] @cell[(get-name peter-info)] @cell[(get-salary peter-info)]{€}
  ]
  @row[
    @cell[(get-age maria-info)] @cell[(get-name maria-info)] @cell[(get-salary maria-info)]{€}
  ]
  @row[
    @cell[(get-age laura-info)] @cell[(get-name laura-info)] @cell[(get-salary laura-info)]{€}
  ]
]
}|

And you will see this:

@table[
  @row[
    @cell{Age} @cell{Name} @cell{Salary}
  ]
  @row[
    @cell[34] @cell["Peter Garcia"] @cell[1435]{€}
  ]
  @row[
    @cell[27] @cell["Maria Martinez"] @cell[1765]{€}
  ]
  @row[
    @cell[53] @cell["Laura Beneyto"] @cell[1543]{€}
  ]
]

@subheader{Lists}

You can add lists with @fref[itemize] or @fref[enumerate]. For example:

@verbatim-code-block[:lang "common-lisp"]|{
@itemize[
  @item{Vegetables:}
  @enumerate[
    @item{3 peppers}
    @itemize[
      @item{1 green pepper}
      @item{@(- 3 1) red pepper}
    ]
    @item{0.25 Kg of carrots}
  ]
  @item{Fruits:}
  @enumerate[
    @item{0.5 Kg of apples}
    @item{6 oranges}
  ]
]
}|

You will see this:

@itemize[
  @item{Vegetables:}
  @enumerate[
    @item{3 peppers}
    @itemize[
      @item{1 green pepper}
      @item{@(- 3 1) red pepper}
    ]
    @item{0.25 Kg of carrots}
  ]
  @item{Fruits:}
  @enumerate[
    @item{0.5 Kg of apples}
    @item{6 oranges}
  ]
]

@subheader{Text style}

We can enrich the text with the macros @fref[bold], @fref[italic], @fref[emphasis] and @fref[link]. For example:

@verbatim-code-block[:lang "text"]|{
As @bold{Andrew} said: @italic{You only need @(+ 1 2 3)} @link[:address "https://en.wikipedia.org/wiki/Coin"]{coins} @italic{to enter in} @emphasis{The Giant Red Tree}.
}|

You will see this:

As @bold{Andrew} said: @italic{You only need @(+ 1 2 3)} @link[:address "https://en.wikipedia.org/wiki/Coin"]{coins} @italic{to enter in} @emphasis{The Giant Red Tree}.

You can nest @fref[bold] and @fref[italic] functions:

@verbatim-code-block[:lang "text"]|{
The large @bold{house with @italic{the old woman}}.
}|

The large @bold{house with @italic{the old woman}}.

Lastly, you can quote text:

@verbatim-code-block[:lang "text"]|{
@quoted{
A driller by day
A driller by night
Bugs never hurt
As they're frozen from fright

My c4 goes boom
Sharp as a ruler
Just me and my baby
@italic{Perfectly Tuned Cooler}

- A Deep Rock Galactic poem by @link[:address "https://www.reddit.com/user/TEAdown/"]{TEAdown}
}
}|

@quoted{
A driller by day
A driller by night
Bugs never hurt
As they're frozen from fright

My c4 goes boom
Sharp as a ruler
Just me and my baby
@italic{Perfectly Tuned Cooler}

- A Deep Rock Galactic poem by @link[:address "https://www.reddit.com/user/TEAdown/"]{TEAdown}
}


@subheader{Images}

You can add images with the macro @fref[image]. For example, an image is located at @inline{guides/images/}. If I evaluate the next expression:

@verbatim-code-block[:lang "text"]|{
  @image[#P"images/Lisp_logo.svg" :alt-text "Lisp logo" :scale 0.1]
}|

You will see:

@image[#P"images/Lisp_logo.svg" :alt-text "Lisp logo" :scale 0.1]


@subheader{Code blocks}

A good Lisp tutorial must include Lisp code examples. ADP defines some macros to print code blocks: @fref[code-block], @fref[verbatim-code-block] and @fref[example]. The first macro does not evaluate the code. So, for example if you write this:

@verbatim-code-block[:lang "text"]|{
  @code-block[
    (this is not (valid code))
    (but it (is (ok)))
  ]
}|

You will see:

@code-block[
  (this is not (valid code))
  (but it (is (ok)))
]

The macro @fref[verbatim-code-block] allows you to write non-Lisp code. It can receive, optionally, the language to be used:

@verbatim-code-block[:lang "text"]|{
@verbatim-code-block[:lang "c"]{
  int main(){
    printf("Hello world!");
    return 0;
  }     
}
}|

@verbatim-code-block[:lang "c"]|{
  int main(){
    printf("Hello world!");
    return 0;
  }     
}|

If you want to print also @"@"-syntax expressions, you can use the @inline["|{...}|"] form:

@verbatim-code-block[:lang "text"]|{
@verbatim-code-block[:lang "scribble"]|{
  @cmd[datum]{parse-body}     
}|
}|

@verbatim-code-block[:lang "scribble"]|{
  @cmd[datum]{parse-body}     
}|

Lastly, @fref[example] evaluate the Lisp code you write on it. And what is more, it prints the standard output as well as the returned values. For example, writing this:

@verbatim-code-block[:lang "text"]|{
@example[
  (loop for i from 0 below 10
        do (print i))
  (values "Hello" "world")
]
}|

You will see:

@example[
  (loop for i from 0 below 10
        do (print i))
  (values "Hello" "world")
]

@subheader{Cross references}

ADP-GITHUB supports cross references with tags. A tag is just a symbol with some information associated. There are four types of tags: @inline{:header}, @inline{:function}, @inline{:variable} and @inline{:type}.

@subsubheader{Header tags}

A header-tag is a symbol with a header associated. We have already seen how to add a header to the documentation. But I didn't say that the macros @fref[header], @fref[subheader] and @fref[subsubheader] receives a second optional argument. As you can imagine, this second argument must be a symbol that will be converted to a header tag. For example, the first header of this file is created with this expression:

@verbatim-code-block[:lang "text"]|{
@header[:tag user-guide]{User Guide}
}|

Now the symbol @inline{user-guide} is a header tag. We can make a reference to that header with the macro @fref[href]. For example, if I write this:

@verbatim-code-block[:lang "text"]|{
Go to the top: @href[user-guide].
}|

Then you will see:

Go to the top: @href[user-guide].

@subsubheader{Function, variable and type tags}

These tags are symbols associated with a function, a variable or a type respectively. More specifically, the macros used to define things like @fref[defun], @fref[defparameter] or @fref[defstruct] can create automatically a function tag, a variable tag or a type tag respectively. The tag created is the symbol of the name of the function, variable or type defined respectively. ADP-GITHUB defines three types of tags because the same symbol can refer to a function, a variable and a type simultaneously. The next list shows what type of tags are defined by which macros:

@itemize[
  @item{Function tags:}
  @itemize[
    @item{@fref[defgeneric]}
    @item{@fref[define-modify-macro]}
    @item{@fref[defmacro]}
    @item{@fref[defun]}
  ]
  @item{Symbol tags:}
  @itemize[
    @item{@fref[defconstant]}
    @item{@fref[define-symbol-macro]}
    @item{@fref[defparameter]}
    @item{@fref[defvar]}
  ]
  @item{Type tags:}
  @itemize[
    @item{@fref[defclass]}
    @item{@fref[define-condition]}
    @item{@fref[defstruct]}
    @item{@fref[deftype]}
  ]
]

Same as with header-tags, we can make reference to functions, variables and types with @fref[fref], @fref[vref] and @fref[tref]. For example, to make a reference to an ADP-GITHUB macro:

@verbatim-code-block[:lang "scribble"]|{
A refeence to an ADP-GITHUB macro: @fref[header].
}|

You will see:

A reference to an ADP-GITHUB macro: @fref[header].

